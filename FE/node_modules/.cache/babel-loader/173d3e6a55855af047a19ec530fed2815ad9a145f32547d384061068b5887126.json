{"ast":null,"code":"/*\r\n\r\nFetch và Axios là hai cách khác nhau để thực hiện yêu cầu HTTP trong JavaScript.\r\nDưới đây là một số sự khác nhau chính giữa chúng:\r\n\r\nAPI và Cú pháp: Fetch là một API tiêu chuẩn của JavaScript và được tích hợp sẵn trong các trình duyệt\r\nhiện đại. Axios là một thư viện bên ngoài, bạn cần cài đặt nó thông qua npm hoặc yarn và sau đó import\r\nvào dự án.\r\n\r\nTrình duyệt hỗ trợ: Fetch được tích hợp trong các trình duyệt hiện đại, nhưng có một số sự khác biệt\r\ntrong việc hỗ trợ và cú pháp giữa các trình duyệt. Axios không bị giới hạn bởi các vấn đề tương thích\r\ntrình duyệt và hoạt động tương tự trên cả máy chủ và trình duyệt.\r\n\r\nSử dụng: Fetch được sử dụng thông qua API tiêu chuẩn fetch() và trả về một Promise. Axios cung cấp một\r\ngiao diện dễ sử dụng hơn và trả về một Promise nên có thể được sử dụng dễ dàng trong mã bất đồng bộ.\r\n\r\nXử lý lỗi: Axios cung cấp cách xử lý lỗi dễ dàng hơn bằng cách sử dụng .catch() trực tiếp trên\r\nPromise trả về. Fetch yêu cầu xử lý lỗi bằng cách kiểm tra trạng thái của phản hồi và ném một ngoại lệ.\r\n\r\nCấu hình mặc định: Axios cung cấp các cấu hình mặc định tốt hơn cho các yêu cầu HTTP như xử lý tự\r\nđộng dạng JSON và quản lý cookie. Fetch cần nhiều cấu hình hơn để thực hiện những tác vụ tương tự.\r\n\r\nHỗ trợ hủy: Axios hỗ trợ việc hủy yêu cầu HTTP, điều này rất hữu ích khi bạn muốn hủy một yêu cầu\r\nđang chờ khi người dùng thực hiện hành động khác. Fetch không hỗ trợ hủy yêu cầu một cách dễ dàng.\r\n */\nimport axios from \"axios\";\n// Địa chỉ API của máy chủ dùng để gọi các yêu cầu đăng ký\nconst API_URL = \"http://localhost:8080/api/auth/\";\n\n// Hàm đăng ký người dùng, gửi yêu cầu POST đến máy chủ\nconst register = (username, email, password) => {\n  // Gửi yêu cầu POST đến API đăng ký với thông tin người dùng\n  return axios.post(API_URL + \"signup\", {\n    username,\n    email,\n    password\n  });\n};\n\n// Hàm thực hiện đăng nhập người dùng\nconst login = (username, password) => {\n  // Gửi yêu cầu POST đến API đăng nhập với tên đăng nhập và mật khẩu\n  return axios.post(API_URL + \"signin\", {\n    username,\n    password\n  }).then(response => {\n    // Kiểm tra nếu nhận được mã thông báo truy cập (accessToken) từ phản hồi\n    if (response.data.accessToken) {\n      // Lưu thông tin người dùng và mã thông báo vào localStorage\n      localStorage.setItem(\"user\", JSON.stringify(response.data));\n    }\n    // Trả về dữ liệu phản hồi\n    return response.data;\n  });\n};\n\n//Hàm thực hiện đăng xuất người dùng\nconst logout = () => {\n  //Lấy thông tin người dùng từ localStorage sau đó xóa đi\n  localStorage.removeItem(\"user\");\n};\n\n// Hàm lấy thông tin người dùng hiện tại từ localStorage\nconst getCurrentUser = () => {\n  // Lấy dữ liệu người dùng từ localStorage và chuyển đổi nó từ chuỗi JSON sang đối tượng JavaScript\n  return JSON.parse(localStorage.getItem(\"user\"));\n};\nconst authapi = {\n  register,\n  login,\n  logout,\n  getCurrentUser\n};\nexport default authapi;","map":{"version":3,"names":["axios","API_URL","register","username","email","password","post","login","then","response","data","accessToken","localStorage","setItem","JSON","stringify","logout","removeItem","getCurrentUser","parse","getItem","authapi"],"sources":["C:/Users/Dell/IdeaProjects/onlinequizfe/src/api/authapi.js"],"sourcesContent":["\r\n/*\r\n\r\nFetch và Axios là hai cách khác nhau để thực hiện yêu cầu HTTP trong JavaScript.\r\nDưới đây là một số sự khác nhau chính giữa chúng:\r\n\r\nAPI và Cú pháp: Fetch là một API tiêu chuẩn của JavaScript và được tích hợp sẵn trong các trình duyệt\r\nhiện đại. Axios là một thư viện bên ngoài, bạn cần cài đặt nó thông qua npm hoặc yarn và sau đó import\r\nvào dự án.\r\n\r\nTrình duyệt hỗ trợ: Fetch được tích hợp trong các trình duyệt hiện đại, nhưng có một số sự khác biệt\r\ntrong việc hỗ trợ và cú pháp giữa các trình duyệt. Axios không bị giới hạn bởi các vấn đề tương thích\r\ntrình duyệt và hoạt động tương tự trên cả máy chủ và trình duyệt.\r\n\r\nSử dụng: Fetch được sử dụng thông qua API tiêu chuẩn fetch() và trả về một Promise. Axios cung cấp một\r\ngiao diện dễ sử dụng hơn và trả về một Promise nên có thể được sử dụng dễ dàng trong mã bất đồng bộ.\r\n\r\nXử lý lỗi: Axios cung cấp cách xử lý lỗi dễ dàng hơn bằng cách sử dụng .catch() trực tiếp trên\r\nPromise trả về. Fetch yêu cầu xử lý lỗi bằng cách kiểm tra trạng thái của phản hồi và ném một ngoại lệ.\r\n\r\nCấu hình mặc định: Axios cung cấp các cấu hình mặc định tốt hơn cho các yêu cầu HTTP như xử lý tự\r\nđộng dạng JSON và quản lý cookie. Fetch cần nhiều cấu hình hơn để thực hiện những tác vụ tương tự.\r\n\r\nHỗ trợ hủy: Axios hỗ trợ việc hủy yêu cầu HTTP, điều này rất hữu ích khi bạn muốn hủy một yêu cầu\r\nđang chờ khi người dùng thực hiện hành động khác. Fetch không hỗ trợ hủy yêu cầu một cách dễ dàng.\r\n */\r\nimport axios from \"axios\";\r\n// Địa chỉ API của máy chủ dùng để gọi các yêu cầu đăng ký\r\nconst API_URL = \"http://localhost:8080/api/auth/\";\r\n\r\n// Hàm đăng ký người dùng, gửi yêu cầu POST đến máy chủ\r\nconst register = (username, email, password) => {\r\n    // Gửi yêu cầu POST đến API đăng ký với thông tin người dùng\r\n    return axios.post(API_URL + \"signup\", {\r\n        username, email, password\r\n    });\r\n};\r\n\r\n// Hàm thực hiện đăng nhập người dùng\r\nconst login = (username, password) => {\r\n    // Gửi yêu cầu POST đến API đăng nhập với tên đăng nhập và mật khẩu\r\n    return axios.post(API_URL + \"signin\", {\r\n        username, password\r\n    }).then((response) => {\r\n        // Kiểm tra nếu nhận được mã thông báo truy cập (accessToken) từ phản hồi\r\n        if (response.data.accessToken) {\r\n            // Lưu thông tin người dùng và mã thông báo vào localStorage\r\n            localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n        }\r\n        // Trả về dữ liệu phản hồi\r\n        return response.data;\r\n    });\r\n};\r\n\r\n//Hàm thực hiện đăng xuất người dùng\r\nconst logout = () => {\r\n    //Lấy thông tin người dùng từ localStorage sau đó xóa đi\r\n    localStorage.removeItem(\"user\");\r\n};\r\n\r\n// Hàm lấy thông tin người dùng hiện tại từ localStorage\r\nconst getCurrentUser = () => {\r\n    // Lấy dữ liệu người dùng từ localStorage và chuyển đổi nó từ chuỗi JSON sang đối tượng JavaScript\r\n    return JSON.parse(localStorage.getItem(\"user\"));\r\n};\r\n\r\nconst authapi = {\r\n    register, login, logout, getCurrentUser\r\n};\r\n\r\nexport default authapi;\r\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,MAAMC,OAAO,GAAG,iCAAiC;;AAEjD;AACA,MAAMC,QAAQ,GAAGA,CAACC,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,KAAK;EAC5C;EACA,OAAOL,KAAK,CAACM,IAAI,CAACL,OAAO,GAAG,QAAQ,EAAE;IAClCE,QAAQ;IAAEC,KAAK;IAAEC;EACrB,CAAC,CAAC;AACN,CAAC;;AAED;AACA,MAAME,KAAK,GAAGA,CAACJ,QAAQ,EAAEE,QAAQ,KAAK;EAClC;EACA,OAAOL,KAAK,CAACM,IAAI,CAACL,OAAO,GAAG,QAAQ,EAAE;IAClCE,QAAQ;IAAEE;EACd,CAAC,CAAC,CAACG,IAAI,CAAEC,QAAQ,IAAK;IAClB;IACA,IAAIA,QAAQ,CAACC,IAAI,CAACC,WAAW,EAAE;MAC3B;MACAC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACC,IAAI,CAAC,CAAC;IAC/D;IACA;IACA,OAAOD,QAAQ,CAACC,IAAI;EACxB,CAAC,CAAC;AACN,CAAC;;AAED;AACA,MAAMM,MAAM,GAAGA,CAAA,KAAM;EACjB;EACAJ,YAAY,CAACK,UAAU,CAAC,MAAM,CAAC;AACnC,CAAC;;AAED;AACA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EACzB;EACA,OAAOJ,IAAI,CAACK,KAAK,CAACP,YAAY,CAACQ,OAAO,CAAC,MAAM,CAAC,CAAC;AACnD,CAAC;AAED,MAAMC,OAAO,GAAG;EACZnB,QAAQ;EAAEK,KAAK;EAAES,MAAM;EAAEE;AAC7B,CAAC;AAED,eAAeG,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}